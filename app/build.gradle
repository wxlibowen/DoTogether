apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: 'version.gradle'//此处用于加载version.gradle中的版本号
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.aliyun.ams.emas-services'



android {
    compileSdkVersion 28 //编译工程的SDK版本
//    buildToolsVersion '28.0.3'//构建工具的版本
    useLibrary 'org.apache.http.legacy'//optional可选库需要次方法来加载到classpath中
    //默认配置
    defaultConfig {
        applicationId "com.example.administrator.testone"//配置包名 (构建的时候从AndroidManifest.xml中读取)
        minSdkVersion 19        //支持的最低系统版本
        targetSdkVersion 28     //基于那个android版本开发
        versionCode appVersionCode   //app内部版本号 控制app升级
        versionName appVersionName   //应用的版本名称,展示给用户看
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true //与依赖配合负责决定启动Multidex

    }
    //签名
    signingConfigs {
        release {//生产环境下的签名
            storeFile file("../app/myKey.jks")//签名证书文件
            storePassword "woai0520"//签名证书文件的密码
            keyAlias "key0"//签名证书中密钥别名
            keyPassword "woai0520"//签名证书中该密钥的密码
        }
        debug {//测试环境
//            storeFile file("mydebugkey.keystore")//签名证书文件
//            storePassword "password"//签名证书文件的密码
//            keyAlias "MyDebugKey"//签名证书中密钥别名
//            keyPassword "password"//签名证书中该密钥的密码
        }
    }
    //多渠道打包
    productFlavors {
        //谷歌渠道
        google {
            //动态配置AndroidManifest文件替换Key为UMENG_CHANNEL的value值 清单文件中 <meta-data android:value="${UMENG_CHANNEL}" android:name="UMENG_CHANNEL"/>
            manifestPlaceholders.put("UMENG_CHANNEL", "google")
            //为不同渠道设置不同的常量值 <type> <name>=<value>
            buildConfigField('String', 'WEB_URL', '"http://www.google.com"')
            //动态添加自定义资源 type包含 id bool dimen integer color等 与buildConfigField相似 可以在buildType中使用
            resValue 'string', 'channel_tips', 'google渠道欢迎您'
            //也是一种混淆的配置方法 只对库项目有用对arr包里的代码进行混淆
            //consumerProguardFiles 'proguard-rules.pro' ,'proguard-android.txt'
            //测试用包名 下方三个都用于单元测试
            testApplicationId "com.example.administrator.testone.test"
            //是否为功能测试
            testFunctionalTest true
            //是否启动分析功能
            testHandleProfiling true
        }
        xiaomi {
            manifestPlaceholders.put("UMENG_CHANNEL", "xiaomi")
            buildConfigField('String', 'WEB_URL', '"http://www.xiaomi.com"')
            resValue 'string', 'channel_tips', 'xiaomi渠道欢迎您'
        }

        //通过迭代productFlavors的方式批量替换
        productFlavors.all {
            flavor ->
                manifestPlaceholders.put("UMENG_CHANNEL", name)
        }
    }
    //打包apk(设置APK统一的名称) 此处为书本上的会报错
//    android.applicationVariants.all {
//        variant ->
//            variant.outputs.each { output ->
//                if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
//                    def flavorName = variant.flavorName.startsWith("_") ? variant.flavorName.substring(1) : variant.flavorName
//                    def apkFile = new File(output.outputFile.getParent(), "Example92${flavorName}_v${variant.versionName}_${buildTime()}.apk")
//                    output.outputFile = apkFile
//                }
//            }
//    }
    //打包Apk必须加入此句否则报错
    flavorDimensions "versionCode"
//    //打包apk(设置APK统一的名称)
    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                //此处打印渠道名称
                def flavorName = variant.flavorName.startsWith("_") ? variant.flavorName.substring(1) : variant.flavorName
                //结果为myApp_渠道名称_v版本号_创建时间
                outputFileName = "myApp_${flavorName}_v${variant.versionName}_${buildTime()}.apk"
            }
    }
    //构建类型
    buildTypes {
        release {
            //启用zipalign优化(提高系统和应用的运行效率,更快的读写apk中的资源,降低内存开销,一定要优化)
            zipAlignEnabled true
            //是否启用混淆 开启可以配合shrinkResources对APK进行精简
            minifyEnabled false
            //配置混淆的配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //配置是否自动清理未使用的资源
            shrinkResources false
            //在此处也可构建自定义字段(比如生产环境和开发环境的服务器地址)
            buildConfigField 'String', 'Name', '"ReleaseType"'


        }
        debug {
            minifyEnabled false //是否启用混淆 一般debug下不需要混淆 否则无法打断点
            buildConfigField 'String', 'Name', '"DebugType"'


        }


    }
    //对Java编译选项进行配置
    compileOptions {
        //配置源文件的编码
        encoding = 'utf-8'
        //编译源代码的级别
        sourceCompatibility = JavaVersion.VERSION_1_8
        //配置生成Java字节码的版本
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    //adb操作选项配置
    adbOptions {
        //设置执行adb命令的超时时间
        timeOutInMs = 5 * 1000//秒
        //安装设置 六个配置 -l锁定该应用程序 -r替换已经存在的应用程序(强制安装) -t允许测试包 -s把应用程序安装在SD卡上 -d允许进行降级安装 -g为该应用程序授予所有运行时权限
        installOptions '-r', '-s'
    }
    //对DEX进行配置
    dexOptions {
        //增量模式 虽然速度会提高但是有很多限制 不建议开启 目前已经废弃
//        incremental false
        //分配最大堆内存
        javaMaxHeapSize '4g'
        //为android5.0 解决方法超过65535的限制
        jumboMode true
        //配置是否预执行dex Libraries库工程(默认开启) 大大提高增量构建速度但是影响clean速度 当使用dx的--multi-dex冲突时需要设为false
        preDexLibraries true
        //设置执行dx命令时线程的数量(越大dx效率越高)
        threadCount 2
    }
    //代码资源优化工具Lint,会生成报告哪里需要优化
    lintOptions {
        abortOnError false   //检查到错误会停止构建
        warningsAsErrors false   //是否把警告也当作错误处理 默认为false
        absolutePaths true //配置错误的输出力是否显示绝对路径 默认为true
        check 'NewApi', 'InlinedApi'  //检查是否使用了新的api 多个使用下方的集合
    }
    //融云兼容代码
//    aaptOptions {
//        additionalParameters "--no-version-vectors"
//    }
    buildToolsVersion '28.0.3'
}
//用于展示创建apk的时间
static def buildTime() {
    def date = new Date()
    def formatTime = date.format('yyyyMMdd')
    return formatTime
}

sourceSets {
    main {
        resources {
            srcDir 'src/resources'
        }
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //引用其他module
    implementation project(':firstlabrary')
    //android5.0之前支持65535方法数的依赖
    implementation 'com.android.support:multidex:1.0.3'
    //阿里云热修复依赖
    implementation 'com.aliyun.ams:alicloud-android-hotfix:3.2.6'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    //RxJava和Retrofit
    implementation 'io.reactivex.rxjava2:rxjava:2.2.2'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'com.squareup.okhttp3:okhttp:3.13.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'
    //MultipleStatusView
    implementation 'com.classic.common:multiple-status-view:1.5.1'
    //AnKo
    implementation 'org.jetbrains.anko:anko-sdk15:0.10.7'
    //引用的module
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    //  图片框架
    implementation 'com.github.bumptech.glide:glide:4.8.0'
}
repositories {
    mavenCentral()
}
